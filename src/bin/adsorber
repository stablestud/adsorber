#!/bin/sh

# Author:     stablestud <adsorber@stablestud.org>
# Repository: https://github.com/stablestud/adsorber
# License:    MIT, https://opensource.org/licenses/MIT

# Variable naming:
# under_score        - used for global variables which are accessible between functions.
# _extra_under_score - used for local function/file variables. Should be unset afterwards.
#          (Note the underscore in the beginning of _extra_under_score!)

# shellcheck disable=SC2154

readonly tmp_dir_path="/tmp/adsorber"
readonly cache_dir_path="/var/cache/adsorber"
readonly debug="false"



############[ DO NOT EDIT ]#####################################################

# NOTE: following values will be changed when installed with
# 'place_files_onto_system.sh', if you want to change them, change them there

readonly executable_dir_path="$(cd "$(dirname "${0}")" && pwd)"
readonly library_dir_path="${executable_dir_path}/../lib/"
readonly shareable_dir_path="${executable_dir_path}/../share/"
readonly config_dir_path="${executable_dir_path}/../../"
readonly log_file_path="/var/log/adsorber.log"



readonly version="1.0.1"
readonly operation="${1}"

if [ "${#}" -ne 0 ]; then
        shift
fi

readonly options="${*}"

checkRoot()
{
        # Changing the hosts file requires root rights!
        if [ "$(id -g)" -ne 0 ]; then
                echo "$(id -un), I require way more more power then this! How about .. root ..? ;)" 1>&2
                exit 126
        fi

        checkPaths
        sourceFiles
}


checkForWrongParameters()
{
        if [ "${_option_help}" = "true"  ]; then
                showSpecificHelp
        fi

        if [ -n "${_wrong_operation}" ] || [ -n "${_wrong_option}" ]; then
                showUsage
        fi
}


showUsage()
{
        if [ -n "${_wrong_operation}" ]; then
                echo "Adsorber: Invalid operation: '${_wrong_operation}'" 1>&2
        fi

        if [ -n "${_wrong_option}" ]; then
                echo "Adsorber: Invalid option: '${_wrong_option}'" 1>&2
        fi

        echo "Usage: adsorber <enable|disable|start|stop|revert> [<options>|--help]"
        echo "Try 'help' for more information."

        exit 80
}


showHelp()
{
        echo "Usage: adsorber <operation> [<options>|--help]"
        echo
        echo "(Ad)sorber blocks ads by \"absorbing\" and dumbing them into void."
        echo "     (with the help of the hosts file)"
        echo
        echo "Operations (required):"
        echo "  - enable, setup"
        echo "      setup necessary things needed for Adsorber"
        echo "        e.g., create backup file of hosts file,"
        echo "              create scheduler which updates the host file once a week"
#       echo "      However this should've been done automatically."
        echo "  - start, update"
	echo "      update hosts file with newest ad-domains"
        echo "  - stop, restore"
        echo "      restore hosts file to its original state"
        echo "      (it does not remove the scheduler, this should be used temporary)"
        echo "  - revert"
        echo "      reverts the hosts file to the last applied (previous) ad-domains"
        echo "  - disable"
        echo "      completely remove changes made by Adsorber"
        echo "         e.g., disable scheduler (if set)"
        echo "               restore hosts file to its original state"
        echo "  - version"
        echo "      show version of this shell script"
        echo "  - help"
        echo "      show this help"
        echo
        echo "Options (optional):"
        echo "  -y,  --yes, --assume-yes - answer all prompts with 'yes'"
        echo "  -f,  --force             - force the update if no /etc/hosts backup"
        echo "                             has been created (dangerous!)"
        echo "  -h,  --help              - show specific help of specified operations"
        echo "                             (e.g 'adsorber update --help)"
        echo "  --noformatting           - turn off coloured and formatted output"
        echo
        echo "Scheduler options (use with 'enable'):"
        echo "  -ns, --no-scheduler      - skip scheduler creation"
        echo "  -s,  --systemd           - setup Systemd as scheduler"
        echo "  -c,  --cron              - setup Cronjob ..."
        echo "  -H,  --hourly            - run scheduler once hourly"
        echo "  -D,  --daily                              ... daily"
        echo "  -W,  --weekly                             ... weekly"
        echo "  -M,  --monthly                            ... monthly"
        echo "  -Q,  --quarterly                          ... quarterly (4x a year)"
        echo "  -S,  --semiannually                       ... semiannually (2x a year)"
        echo "  -Y,  --yearly                             ... yearly"
        echo
        echo "Config files are located at: $(cd "${config_dir_path}" && pwd)/"
        echo
        echo "Documentation: https://github.com/stablestud/adsorber/blob/master/README.md
        echo "If you encounter any issues please report them to the Github repository."

        exit 0
}


showSpecificHelp()
{
        case "${operation}" in
                setup | enable )
                        printf "\\033[4;37madsorber ${operation} [<options>]\\033[0m:\\n"
                        echo
                        echo "You should run this command first."
                        echo "  (e.g. after files have been placed onto the system)"
                        echo
                        echo "The command will:"
                        echo " - backup your /etc/hosts file to /etc/hosts.original"
                        echo "   (if not other specified in adsorber.conf)"
                        echo " - setup a scheduler which updates your hosts file with ad-domains periodically"
                        echo "   (either systemd, cronjob or none)"
                        echo " - fetch the newest ad-domains to your hosts file."
                        echo "   (it runs 'adsorber update')"
                        echo
                        echo "Possible options:"
                        echo " -y,  --yes, --assume-yes  - answer all prompts with 'yes'"
                        echo " -s,  --systemd            - use Systemd ..."
                        echo " -c,  --cron               - use Cronjob as scheduler"
                        echo " -ns, --no-scheduler       - skip scheduler creation"
                        echo " -h,  --help               - show this help screen"
                        echo " -H,  --hourly             - run scheduler once hourly"
                        echo " -D,  --daily                               ... daily"
                        echo " -W,  --weekly                              ... weekly"
                        echo " -M,  --monthly                             ... monthly"
                        echo " -Q,  --quarterly                           ... quarterly (4x a year)"
                        echo " -S,  --semiannually                        ... semiannually (2x a year)"
                        echo " -Y,  --yearly                              ... yearly"
                        echo " --noformatting            - turn off coloured and formatted output"
                        echo
                        echo "Note: Cron supports only hourly, daily, weekly and monthly."
                        ;;
                update | start )
                        printf "\\033[4;37madsorber ${operation} [<options>]\\033[0m:\\n"
                        echo
                        echo "Updates your hosts files with the newest ad-domains fetched from the sources specified in 'sources.list'."
                        echo
                        echo "The command will:"
                        echo " - fetch the newest ad-domains into your hosts file."
                        echo
                        echo "Possible options:"
                        echo " -f, --force      - force the update if no /etc/hosts backup"
                        echo "                    has been created (dangerous)"
                        echo " -h, --help       - show this help screen"
                        echo " --noformatting   - turn off coloured and formatted output"
                        ;;
                restore | stop )
                        printf "\\033[4;37madsorber ${operation} [<options>]\\033[0m:\\n"
                        echo
                        echo "Restore the hosts file to its operating system default, without removing the backup or scheduler."
                        echo
                        echo "The command will:"
                        echo " - Remove lines inserted by Adsorber from '/etc/hosts'"
                        echo
                        echo "Note: If you have a scheduler set it'll re-apply ad-domains to your hosts file when triggered."
                        echo "For this reason this command should be used to temporary disable Adsorber."
                        echo "(e.g. when it's blocking some sites you need access for a short period of time)"
                        echo
                        echo "To re-apply run 'adsorber revert' (for previous host file) or 'adsorber start' (for updated version)."
                        echo
                        echo "Possible options:"
                        echo " -h, --help       - show this help screen"
                        echo " --noformatting   - turn off coloured and formatted output"
                        ;;
                revert )
                        printf "\\033[4;37madsorber ${operation} [<options>]\\033[0m:\\n"
                        echo
                        echo "Revert the current hosts file to the previously applied ad-domains"
                        echo "Use it if the current host file has been corrupted or misses previously applied ad-domains."
                        echo
                        echo "The command will:"
                        echo " - downgrade /etc/hosts with ad-domains applied previously"
                        echo
                        echo "To get the latest ad-domains run 'adsorber start'."
                        echo
                        echo "Possible options:"
                        echo " -h, --help       - show this help screen"
                        echo " --noformatting   - turn off coloured and formatted output"
                        ;;
                disable )
                        printf "\\033[4;37madsorber disable [<options>]\\033[0m:\\n"
                        echo
                        echo "Completely disable all background tasks (schedulers) and remove all changes made by Adsorber."
                        echo
                        echo "The command will:"
                        echo " - disable/remove all schedulers (systemd, cronjob)"
                        echo " - restore the hosts file to it's original state"
                        echo " - remove all leftovers (e.g. /tmp/adsorber, cache, etc)"
                        echo
                        echo "It'll not remove/uninstall the 'adsorber' command from the system."
                        echo "To do this you need to run the 'remove_files_from_system.sh' script."
                        echo
                        echo "Possible options:"
                        echo " -y, --yes, --assume-yes  - answer all prompts with 'yes'"
                        echo " -h, --help               - show this help screen"
                        echo " --noformatting           - turn off coloured and formatted output"
                        ;;
                * )
                        showHelp
                        ;;
        esac

        exit 0
}


showVersion()
{
        echo "(Ad)sorber ${version}"
        echo ""
        echo "  License MIT"
        echo "  Copyright (c) 2017 stablestud <adsorber@stablestud.org>"
        echo "  This is free software: you are free to change and redistribute it."
        echo "  There is NO WARRANTY, to the extent permitted by law."
        echo ""
        echo "Written by stablestud - and hopefully in the future with many others. ;)"
        echo "Repository: https://github.com/stablestud/adsorber"

        exit 0
}


duplicateOption()
{
        if [ "${1}" = "scheduler" ]; then
                echo "Adsorber: Duplicate option for scheduler: '${2}'" 1>&2
                echo "You may select only one:"
                echo "  -s,  --systemd       - use Systemd as scheduler"
                echo "  -c,  --cron          - use Cronjob ..."
                echo "  -ns, --no-scheduler  - skip scheduler creation"
        elif [ "${1}" = "frequency" ]; then
                echo "Adsorber: Duplicate option for schedulers frequency: '${2}'" 1>&2
                echo "You may select only one:"
                echo "  -H,  --hourly        - run scheduler once hourly"
                echo "  -D,  --daily                          ... daily"
                echo "  -W,  --weekly                         ... weekly"
                echo "  -M,  --monthly                        ... monthly"
                echo "  -Q,  --quarterly                      ... quarterly (4x a year)"
                echo "  -S,  --semiannually                   ... semiannually (2x a year)"
                echo "  -Y,  --yearly                         ... yearly"
        else
                echo "Adsorber: Duplicate option: '${2}'" 1>&2
                showUsage
        fi

        exit 80
}


checkPaths()
{
        # Check if essential files for adsorber exists, if not, try to fix or abort

        _not_found=false

        if [ ! -e "${library_dir_path}" ]; then
                printf "\\033[0;91mE Invalid library_dir_path, can't access %s\\033[0m\\n" "${library_dir_path}"
                _not_found=true
        fi

        if [ ! -e "${config_dir_path}" ]; then
                mkdir -p "${config_dir_path}"
        fi

        if [ ! -e "${shareable_dir_path}" ]; then
                printf "\\033[0;91mE Invalid shareable_dir_path, can't access %s\\033[0m\\n" "${shareable_dir_path}"
                _not_found=true
        fi

        if [ "${_not_found}" = "true" ]; then
                echo "  To fix: completely remove Adsorber from the system and re-install it again."
                echo "  Please fix the problem(s) and try again."
                exit 1
        fi

        unset _not_found
}


sourceFiles()
{
        # shellcheck source=../src/lib/colours.sh
        . "${library_dir_path}/colours.sh"
        # shellcheck source=../src/lib/cleanup.sh
        . "${library_dir_path}/cleanup.sh"
        # shellcheck source=../src/lib/setup.sh
        . "${library_dir_path}/setup.sh"
        # shellcheck source=../src/lib/disable.sh
        . "${library_dir_path}/disable.sh"
        # shellcheck source=../src/lib/update.sh
        . "${library_dir_path}/update.sh"
        # shellcheck source=../src/lib/restore.sh
        . "${library_dir_path}/restore.sh"
        # shellcheck source=../src/lib/revert.sh
        . "${library_dir_path}/revert.sh"
        # shellcheck source=../src/lib/config.sh
        . "${library_dir_path}/config.sh"

        # Maybe source them only when needed?
        # shellcheck source=../src/lib/cron/cron.sh
        . "${library_dir_path}/cron/cron.sh"
        # shellcheck source=../src/lib/systemd/systemd.sh
        . "${library_dir_path}/systemd/systemd.sh"
}


for _option in "${@}"; do

        case "${_option}" in
                -s | --systemd )
                        if [ -z "${reply_to_scheduler_prompt}" ]; then
                                readonly reply_to_scheduler_prompt="systemd"
                        else
                                duplicateOption "scheduler" "${_option}"
                        fi
                        ;;
                -[Cc] | --cron | --crontab | --cronjob )
                        if [ -z "${reply_to_scheduler_prompt}" ]; then
                                readonly reply_to_scheduler_prompt="cronjob"
                        else
                                duplicateOption "scheduler" "${_option}"
                        fi
                        ;;
                -[Nn][Ss] | --no-scheduler )
                        if [ -z "${reply_to_scheduler_prompt}" ]; then
                                readonly reply_to_scheduler_prompt="no-scheduler"
                        else
                                duplicateOption "scheduler" "${_option}"
                        fi
                        ;;
                -y | --[Yy][Ee][Ss] | --assume-yes )
                        if [ -z "${reply_to_prompt}" ]; then
                                readonly reply_to_prompt="yes"
                        else
                                duplicateOption
                        fi
                        ;;
                -[Ff] | --force )
                        if [ -z "${reply_to_force_prompt}" ]; then
                                readonly reply_to_force_prompt="yes"
                        else
                                duplicateOption
                        fi
                        ;;
                -H | --hourly )
                        if [ -z "${frequency}" ]; then
                                readonly frequency="hourly"
                        else
                                duplicateOption "frequency" "${_option}"
                        fi
                        ;;
                -D | --daily )
                        if [ -z "${frequency}" ]; then
                                readonly frequency="daily"
                        else
                                duplicateOption "frequency" "${_option}"
                        fi
                        ;;
                -W | --weekly )
                        if [ -z "${frequency}" ]; then
                                readonly frequency="weekly"
                        else
                                duplicateOption "frequency" "${_option}"
                        fi
                        ;;
                -M | --monthly )
                        if [ -z "${frequency}" ]; then
                                readonly frequency="monthly"
                        else
                                duplicateOption "frequency" "${_option}"
                        fi
                        ;;
                -Q | --quarterly )
                        if [ -z "${frequency}" ]; then
                                readonly frequency="quarterly"
                        else
                                duplicateOption "frequency" "${_option}"
                        fi
                        ;;
                -S | --semi | --semiannually )
                        if [ -z "${frequency}" ]; then
                                readonly frequency="semiannually"
                        else
                                duplicateOption "frequency" "${_option}"
                        fi
                        ;;
                -Y | --yearly | --annually )
                        if [ -z "${frequency}" ]; then
                                readonly frequency="yearly"
                        else
                                duplicateOption "frequency" "${_option}"
                        fi
                        ;;
                -h | --help | help )
                        _option_help="true"
                        ;;
                --noformatting )
                        if [ -z "${use_formatting}" ]; then
                                readonly use_formatting="false"
                        fi
                        ;;
                * )
                        _wrong_option="${_option}" 2>/dev/null
                        ;;
        esac

done

case "${operation}" in
        setup | enable )
                checkForWrongParameters
                checkRoot
                config
                setup
                update
                ;;
        disable )
                checkForWrongParameters
                checkRoot
                config
                disable
                ;;
        update | start )
                checkForWrongParameters
                checkRoot
                config
                update
                ;;
        restore | stop )
                checkForWrongParameters
                checkRoot
                config
                restore
                ;;
        revert )
                checkForWrongParameters
                checkRoot
                config
                revert
                ;;
        -[Hh] | help | --help )
                showHelp
                ;;
        -[Vv] | version | --version )
                showVersion
                ;;
        "" )
                showUsage
                ;;
        * )
                readonly _wrong_operation="${operation}"
                showUsage
                ;;
esac

printf "%bFinished successfully.%b\\n" "${prefix_title}" "${prefix_reset}"

exit 0
